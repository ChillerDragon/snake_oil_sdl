name: Build

on:
  push:
  pull_request:
  merge_group:

jobs:
  build-cmake:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-13, macOS-latest, windows-latest]
        include:
        - os: ubuntu-latest
          cmake-init-env: CXXFLAGS=-Werror
          package-file: "*-Linux.tar.gz"
          package-name: linux_x86_64
        - os: macOS-13
          cmake-init-env: CXXFLAGS=-Werror
          package-file: "*-Darwin.tar.gz"
          package-name: macOS_x86_64
        - os: macOS-latest
          cmake-init-env: CXXFLAGS=-Werror
          package-file: "*-Darwin.tar.gz"
          package-name: macOS_arm64
        - os: windows-latest
          cmake-args: -A x64
          cmake-init-env: CXXFLAGS=/WX LDFLAGS=/WX
          package-file: "*-win64.exe"
          package-name: windows_x86_64
          platform:
            msystem: mingw64
            msys-env: mingw-w64-x86_64
            shell: 'msys2 {0}'
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Prepare Linux
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update -y
        sudo apt-get install -y pkg-config cmake cmake libglew-dev xorg-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev libwayland-dev libxkbcommon-dev libcurl4-openssl-dev build-essential libglfw3

    - name: Prepare macOS
      if: contains(matrix.os, 'macOS')
      run: |
        brew update || true
        brew install pkg-config cmake || true
        sudo rm -rf /Library/Developer/CommandLineTools

    - name: Set up MSYS2
      if: ${{ contains(matrix.platform.shell, 'msys2') }}
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.platform.msystem }}
        path-type: inherit
        install: >-
          ${{ matrix.platform.msys-env }}-cmake
          ${{ matrix.platform.msys-env }}-gcc
          ${{ matrix.platform.msys-env }}-ninja
          ${{ matrix.platform.msys-env }}-perl
          ${{ matrix.platform.msys-env }}-pkg-config
          ${{ matrix.platform.msys-env }}-nasm
          ${{ matrix.platform.msys-env }}-libavif
          ${{ matrix.platform.msys-env }}-libjpeg-turbo
          ${{ matrix.platform.msys-env }}-libjxl
          ${{ matrix.platform.msys-env }}-libpng
          ${{ matrix.platform.msys-env }}-libtiff
          ${{ matrix.platform.msys-env }}-libwebp
          ${{ matrix.platform.msys-env }}-zlib

    - name: Set up NASM
      uses: ilammy/setup-nasm@v1
      if: contains(matrix.os, 'windows')

    - name: Build in debug mode
      run: |
        mkdir debug
        cd debug
        cmake -E env ${{ matrix.cmake-init-env }} cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=Debug -Werror=dev ..
        cmake --build . --config Debug ${{ matrix.build-args }}

    - name: Build in release mode
      run: |
        mkdir release
        cd release
        cmake -E env ${{ matrix.cmake-init-env }} cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=Release -Werror=dev ..
        cmake --build . --config Release ${{ matrix.build-args }}

    - name: Package
      run: |
        cd release
        cmake --build . --config Release --target package ${{ matrix.build-args }}
        mkdir artifacts
        ls
        mv ${{ matrix.package-file }} artifacts

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: snake_oil_sdl-${{ matrix.package-name }}
        path: release/artifacts

